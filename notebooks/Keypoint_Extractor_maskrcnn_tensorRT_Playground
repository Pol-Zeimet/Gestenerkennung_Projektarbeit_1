{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Keypoint_Extractor_maskrcnn_tensorRT_Playground","provenance":[],"private_outputs":true,"collapsed_sections":[],"mount_file_id":"1D7Ft0YpG-EMkNzQMkGbfxyLpYuPDgshy","authorship_tag":"ABX9TyMfgtlz0qUbqWlTZslVydI3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Gg_JkORM4tha","colab_type":"text"},"source":["Notable mention for inspiring me on how to use tf-pose in colab\n","https://colab.research.google.com/drive/1kUVQSmWSJ3aBpbh83NNbUHbEA0IQqufy#scrollTo=YksVb2TvuzR7&forceEdit=true&sandboxMode=true\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"Gu5I96F3Mw9-","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HDLDIlY8lqR1","colab_type":"text"},"source":["Cleaning up unwanted Data\n"]},{"cell_type":"code","metadata":{"id":"C1yGCnreR3cG","colab_type":"code","colab":{}},"source":["!rm -r sample_data/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TwC4Jv-dsw1m","colab_type":"code","colab":{}},"source":["#!tar xvzf  \"/content/drive/My Drive/phoneActions.tar.gz\" --wildcards --no-anchored '29*S008*'\n","!unzip /content/drive/\"My Drive\"/sampledata.zip -d /content"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a9yv9e973AuP","colab_type":"code","colab":{}},"source":["%tensorflow_version 2.x\n","!bash \"/content/drive/My Drive/Colab Notebooks/ss19_pa_gesturerecognition_timeconv/initialize.sh\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-60n35nVP--y","colab_type":"code","colab":{}},"source":["!pip uninstall -y keras\n","!pip uninstall -y scipy\n","!pip install scipy==1.2.2\n","!pip install keras==2.0.8\n","!pip install Cython"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cDr5xi4g38hS","colab_type":"text"},"source":["Installing TensorRT in Colab environment\n"]},{"cell_type":"code","metadata":{"id":"tBaGa1jYq-R-","colab_type":"code","colab":{}},"source":["!bash \"/content/drive/My Drive/Colab Notebooks/ss19_pa_gesturerecognition_timeconv/install_tensorRT.sh\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mMuPOdpbQORe","colab_type":"text"},"source":["Installing Coco\n"]},{"cell_type":"code","metadata":{"id":"kdG3G9PfQJ-V","colab_type":"code","colab":{}},"source":["!git clone https://github.com/waleedka/coco\n","!pip install -U setuptools\n","!pip install -U wheel\n","!make install -C coco/PythonAPI"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JgPGCwAzQT0R","colab_type":"text"},"source":["Clone und Initialisiere Mask_Rcnn"]},{"cell_type":"code","metadata":{"id":"JUhWObdHQK8L","colab_type":"code","colab":{}},"source":["!git clone https://github.com/matterport/Mask_RCNN"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-tTJLp9eQhY_","colab_type":"code","colab":{}},"source":["import os\n","os.chdir('./Mask_RCNN')\n","!git checkout 555126ee899a144ceff09e90b5b2cf46c321200c\n","!wget https://github.com/matterport/Mask_RCNN/releases/download/v2.0/mask_rcnn_coco.h5\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TVMMnbZlFEg_","colab_type":"text"},"source":["Restart The Notebook now."]},{"cell_type":"code","metadata":{"id":"AcKzRBYLFEOm","colab_type":"code","colab":{}},"source":["os.kill(os.getpid(), 9)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K7qLqdLIyNT8","colab_type":"code","colab":{}},"source":["cd \"/content/drive/My Drive/Colab Notebooks/ss19_pa_gesturerecognition_timeconv/src/movement_classification\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SMjYNVlGt1Zc","colab_type":"code","colab":{}},"source":["import os\n","import math \n","import sys\n","import glob\n","sys.path.append(\"/content/Mask_RCNN/\")\n","sys.path.append(\"/content/coco/\")\n","\n","sys.path.append(\"../../thirdparty/tf-pose/tf-pose-estimation\")\n","\n","\n","import random\n","import math\n","import numpy as np\n","import skimage.io\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n","import coco\n","import utils\n","import model as modellib\n","import visualize\n"," \n","import logging\n","import traceback\n","\n","import time\n","import cv2\n","\n","from tf_pose import common\n","from tf_pose.estimator import TfPoseEstimator\n","from tf_pose.networks import get_graph_path, model_wh\n","\n","import tensorflow as tf\n","print(tf.__version__)\n","%matplotlib inline \n","\n","# Root directory of the project\n","ROOT_DIR = os.getcwd()\n","\n","# Directory to save logs and trained model\n","MODEL_DIR = os.path.join(ROOT_DIR, \"logs\")\n","\n","# Local path to trained weights file\n","COCO_MODEL_PATH = os.path.join(ROOT_DIR, \"/content/Mask_RCNN/mask_rcnn_coco.h5\")\n","# Download COCO trained weights from Releases if needed\n","if not os.path.exists(COCO_MODEL_PATH):\n","    utils.download_trained_weights(COCO_MODEL_PATH)\n","\n","# Directory of images to run detection on\n","IMAGE_DIR = os.path.join(ROOT_DIR, \"images\")\n","print(\"Environment Ready\")\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tn9O9P1t6BQM","colab_type":"code","colab":{}},"source":["def getKeyPointCoords(keypoints_in, depth_frame, relevant_keypoints):\n","  keypoints_out = {}\n","  for relevant_keypoint in relevant_keypoints:\n","    \n","    if relevant_keypoint not in keypoints_in.keys():\n","      keypoints_out[relevant_keypoint] = (0,0,0)\n","    \n","    else:\n","      x = int(keypoints_in[relevant_keypoint][0])\n","      y = int(keypoints_in[relevant_keypoint][1])\n","      z = depth_frame[y][x]\n","      keypoints_out[relevant_keypoint] = (x,y,z)\n","  \n","  return keypoints_out\n","\n","def appendScoresToKeypoints(keypoint_coords, scores):\n","  frame_data = {}\n","  for key in keypoint_coords.keys():\n","    keypoint_data_list = list(keypoint_coords[key])\n","    if key in scores.keys():\n","      keypoint_data_list.append(scores[key])\n","      keypoint_data = tuple(keypoint_data_list)\n","    else:\n","      keypoint_data_list.append(0)\n","      keypoint_data = tuple(keypoint_data_list)\n","    frame_data[key] = keypoint_data\n","\n","  return frame_data\n","\n","\n","def get_human_data(npimg,human):\n","  image_h, image_w = npimg.shape[:2]\n","  centers = {}\n","  scores = {}\n","  for i in range(common.CocoPart.Background.value):\n","      if i not in human.body_parts.keys():\n","          continue\n","      body_part = human.body_parts[i]\n","      center = (int(body_part.x * image_w + 0.5), int(body_part.y * image_h + 0.5))\n","      centers[i] = center\n","      scores[i] = body_part.score\n","  return centers, scores\n","\n","\n","def get_instances_of_class(boxes, masks, ids, names, scores, classes):\n","    n_instances = boxes.shape[0]\n","    class_ids = []\n","    class_instance_indexes = []\n","    class_instance_scores= []\n","    instances = {}\n","    if not n_instances:\n","        print('NO INSTANCES FOUND')\n","        return None\n","    else:\n","        assert boxes.shape[0] == masks.shape[-1] == ids.shape[0]\n","        for class_name in classes:\n","          class_id = names.index(class_name)\n","          class_ids.append(class_id)\n","          instance_indexes = np.where(ids == class_id)\n","          class_instance_indexes = np.append(class_instance_indexes, instance_indexes)\n","\n","    class_instance_indexes = list(map(int, class_instance_indexes))\n","    \n","    for i in class_instance_indexes:\n","        print('FOUND INSTANCE')\n","        instance = {}\n","        if not np.any(boxes[i]):\n","            continue\n","        y1, x1, y2, x2 = boxes[i]\n","        x = round((x1 + x2)/2)\n","        y = round((y1 + y2)/2)\n","        class_name = names[ids[i]]\n","        score = scores[i] if scores is not None else None\n","        caption = '{} {:.2f}'.format(class_name, score) if score else class_name\n","        mask = masks[:, :, i]\n","\n","        instance['box'] = [(y1, x1),(y2, x2)]\n","        instance['middle'] = (x,y)\n","        instance['score'] = score\n","        instance['class_name'] = class_name\n","        instance['caption'] = caption\n","        instance['mask'] = mask\n","        instances[i] = instance\n","\n","    return instances \n","\n","\n","def load_depth_images(path, camera):\n","  depth_to_rgb_affine_transform  = depth_to_rgb_affine_transforms[camera]\n","  depth_frames= []\n","\n","  files = glob.glob(path +'*.png')\n","  files.sort()\n","  for file in files:\n","    raw_depth = cv2.imread(file, cv2.IMREAD_ANYDEPTH )\n","    depth_frames.append(cv2.warpAffine(raw_depth, depth_to_rgb_affine_transform[:2, :], (1920, 1080)))\n","    #depth_frames.append(raw_depth)\n","\n","  print('read ' + str(len(depth_frames)) + ' images' )\n","  return depth_frames\n","\n","def str2bool(v):\n","    return v.lower() in (\"yes\", \"true\", \"t\", \"1\")\n","\n","\n","def run_inference(filename, depth_frames):\n","  frames = []\n","  capture = cv2.VideoCapture(filename)\n","  frame_array = None\n","  #rgb_to_depth_affine_transform = rgb_to_depth_affine_transforms[camera]\n","  try:\n","    i = 0\n","    while i < len(depth_frames):\n","        frame = []\n","        ret, color_image = capture.read()\n","        #color_image = cv2.warpAffine(color_image, rgb_to_depth_affine_transform[:2, :], (512, 424))\n","        depth_frame = depth_frames[i]\n","\n","        if depth_frame is None:\n","          break\n","        \n","        logger.info('reading frame: ' +  str(i))\n","        \n","        object_results = object_model.detect([color_image])\n","        humans = estimator_obj.inference(color_image, resize_to_default=(w > 0 and h > 0), upsample_size=resize_out_ratio)\n","\n","        logger.info('postprocess+')\n","        if len(humans) > 0:\n","            human = humans[0]\n","            keypoints, scores = get_human_data(color_image, human)\n","\n","        obj_res = object_results[0]\n","        class_instances = get_instances_of_class(obj_res['rois'], \n","                                                obj_res['masks'],\n","                                                obj_res['class_ids'], \n","                                                class_names, \n","                                                obj_res['scores'],\n","                                                interaction_targets)\n","  \n","        for key in interaction_targets:\n","          instance = None\n","          for i in class_instances:\n","            item = class_instances[i]\n","            class_name = item['class_name']\n","            print('found item: '+ class_name)\n","            if class_name == key:\n","              instance = item\n","              break;\n","          if instance is not None:\n","            keypoints[instance['class_name']] = instance['middle']\n","            scores[instance['class_name']] = instance['score']\n","\n","        keypoint_coords = getKeyPointCoords(keypoints, depth_frame, relevant_keypoints)\n","        scored_keypoint_coords = appendScoresToKeypoints(keypoint_coords, scores)\n","\n","        fps_time = time.time()\n","        logger.info('finished+')\n","        i+=1\n","        frames.append(scored_keypoint_coords)\n","  except Exception as err:\n","      logger.critical(err)\n","      traceback.print_exc() \n","      pass \n","  finally:\n","    capture.release()\n","    capture = None\n","\n","  frame_array = np.asarray(frames)\n","  return frame_array"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3nmYd_q9OsPM","colab_type":"code","colab":{}},"source":["logger = logging.getLogger('TfPoseEstimator-WebCam')\n","logger.setLevel(logging.INFO)\n","ch = logging.StreamHandler()\n","ch.setLevel(logging.DEBUG)\n","formatter = logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s')\n","ch.setFormatter(formatter)\n","logger.addHandler(ch)\n","\n","fps_time = 0\n","\n","#Params for tf-pose\n","resize = '432x368' #if provided, resize images before they are processed. default is 0x0, Recommends : 432x368 or 656x368 or 1312x736\n","model = 'mobilenet_v2_large' # cmu / mobilenet_thin / mobilenet_v2_large / mobilenet_v2_small'\n","tensorrt = 'True' #'for tensorrt process.'\n","show_process = 'False' #for debug purpose, if enabled, speed for inference is dropped.'\n","resize_out_ratio = 1.5 #if provided, resize heatmaps before they are post-processed. default is 1.0\n","\n","logger.debug('initialization %s : %s' % (model, get_graph_path(model)))\n","w, h = model_wh(resize)\n","if w > 0 and h > 0:\n","    estimator_obj = TfPoseEstimator(get_graph_path(model), target_size=(w, h), trt_bool=str2bool(tensorrt))\n","else:\n","    estimator_obj = TfPoseEstimator(get_graph_path(model), target_size=(368, 368), trt_bool=str2bool(tensorrt))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rdxIsDkVRGk7","colab_type":"code","colab":{}},"source":["class InferenceConfig(coco.CocoConfig):\n","    # Set batch size to 1 since we'll be running inference on\n","    # one image at a time. Batch size = GPU_COUNT * IMAGES_PER_GPU\n","    GPU_COUNT = 1\n","    IMAGES_PER_GPU = 1\n","    DETECTION_MIN_CONFIDENCE = 0.0\n","\n","\n","config = InferenceConfig()\n","logger.debug(config.display())\n","\n","\n","# Create model object in inference mode.\n","object_model = modellib.MaskRCNN(mode=\"inference\", model_dir=MODEL_DIR, config=config)\n","\n","# Load weights trained on MS-COCO\n","object_model.load_weights(COCO_MODEL_PATH, by_name=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IPtjkGmgRSXi","colab_type":"code","colab":{}},"source":["# COCO Class names\n","# Index of the class in the list is its ID. For example, to get ID of\n","# the teddy bear class, use: class_names.index('teddy bear')\n","class_names = ['BG', 'person', 'bicycle', 'car', 'motorcycle', 'airplane',\n","               'bus', 'train', 'truck', 'boat', 'traffic light',\n","               'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird',\n","               'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear',\n","               'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie',\n","               'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',\n","               'kite', 'baseball bat', 'baseball glove', 'skateboard',\n","               'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup',\n","               'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',\n","               'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',\n","               'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed',\n","               'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote',\n","               'keyboard', 'cell phone', 'microwave', 'oven', 'toaster',\n","               'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors',\n","               'teddy bear', 'hair drier', 'toothbrush']\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bc2JEeQtO9E0","colab_type":"code","colab":{}},"source":["#https://github.com/shahroudy/NTURGB-D/issues/39\n","# convert from rgb to depth frame\n","rgb_to_depth_affine_transforms = dict(\n","   C001=np.array([[3.45638311e-01,  2.79844266e-03, -8.22281898e+01],\n","                  [-1.37185375e-03, 3.46949734e-01,  1.30882644e+01],\n","                  [0.00000000e+00, 0.00000000e+00,  1.00000000e+00]]),\n"," \n","   C002=np.array([[3.42938209e-01,  8.72629655e-04, -7.28786114e+01],\n","                  [3.43287830e-04,  3.43578203e-01,  1.75767495e+01],\n","                  [0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]),\n","\n","   C003=np.array([[3.45121348e-01,  8.53232038e-04, -7.33328852e+01],\n","                  [1.51167845e-03,  3.45115132e-01,  2.22178592e+01],\n","                  [0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]))\n","\n","\n","#-------------------------------------------------------------------------\n","# convert from depth to rgb frame\n","depth_to_rgb_affine_transforms = dict(\n","    C001=np.array([[2.89310518e+00, -2.33353370e-02,  2.38200221e+02],\n","                   [1.14394588e-02,  2.88216964e+00, -3.67819523e+01],\n","                   [0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]),\n","\n","    C002=np.array([[2.90778446e+00, -1.04633946e-02,  2.15505801e+02],\n","                   [-3.43830682e-03,  2.91094100e+00, -5.13416831e+01],\n","                   [0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]),\n","\n","    C003=np.array([[2.89756295e+00, -7.16367761e-03,  2.12645813e+02],\n","                   [-1.26919485e-02,  2.89761514e+00, -6.53095423e+01],\n","                   [0.00000000e+00,  0.00000000e+00,  1.00000000e+00]]))\n","\n","#usage:\n","#depth_to_rgb_affine_transform = depth_to_rgb_affine_transforms[\"C001\"]\n","#frame_depth = cv2.warpAffine(frame_depth, depth_to_rgb_affine_transform[:2, :], (1920, 1080))\n","\n","#rgb_to_depth_affine_transform = rgb_to_depth_affine_transforms[\"C001\"]\n","#frame_rgb = cv2.warpAffine(frame_rgb, rgb_to_depth_affine_transform[:2, :], (512, 424))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K9tauuPeAHs1","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"crLNWuWpRmoh","colab_type":"text"},"source":["Preparing to read video files"]},{"cell_type":"code","metadata":{"id":"e_Opr2HJOWhI","colab_type":"code","colab":{}},"source":["interaction_targets = ['cell phone']\n","#relevant_keypoints = [0,1,2,3,4,5,6,7,8,11]\n","relevant_keypoints=list(range(common.CocoPart.Background.value))\n","\n","for key in interaction_targets:\n","  relevant_keypoints.append(key)\n","\n","\n","print(\"setup complete.\")\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZLirVQP1jVOh","colab_type":"code","colab":{}},"source":["movement_names = ['28_phone_call', '29_play_w_phone', '32_taking_selfie']\n","for movement_name in movement_names:\n","  path = '/content/sampledata/phone_actions/'+movement_name+'/'\n","  rgb_video_files = glob.glob(path +'*.avi')\n","  results = []\n","  #for i in range(1):\n","  for video_file in rgb_video_files:\n","    #video_file = random.choice(rgb_video_files)\n","    depth_folder_name = video_file[0:-8]+'/'\n","    print(depth_folder_name)\n","    camera = video_file[-24:-20]\n","    print(camera)\n","    depth_frames = load_depth_images(depth_folder_name, camera)\n","    if len(depth_frames) > 0:\n","      results.append(run_inference(video_file, depth_frames))\n","  np.save('/content/keypoints_' + movement_name, np.asarray(results), allow_pickle=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"20rCLfXfu88N","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qb4K7T5t5Urk","colab_type":"code","colab":{}},"source":["results"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WkAO3n5VbR9P","colab_type":"code","colab":{}},"source":["len(results)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"w9Sx0v_3bYQ5","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}